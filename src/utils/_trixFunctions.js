function getSchemaFunctions() {
  return [
    // numeric functions
    {name: "ABS", category: "Numeric Functions", return: "Returns the absolute value of a specified value.", example: "ABS(VALUE)"},
    {name: "ACOS", category: "Numeric Functions", return: "Calculate the arc cosine.", example: "ACOS(D)"},
    {name: "ASIN", category: "Numeric Functions", return: "Calculate the arc sine.", example: "ASIN(D)"},
    {name: "ATAN", category: "Numeric Functions", return: "Calculate the arc tangent.", example: "ATAN(D)"},
    {name: "COS", category: "Numeric Functions", return: "Calculate the trigonometric cosine.", example: "COS(ANGLE)"},
    {name: "COSH", category: "Numeric Functions", return: "Calculate the hyperbolic cosine.", example: "COSH(X)"},
    {name: "COT", category: "Numeric Functions", return: "Calculate the trigonometric cotangent (1/TAN(ANGLE)).", example: "COT(ANGLE)"},
    {name: "SIN", category: "Numeric Functions", return: "Calculate the trigonometric sine.", example: "SIN(ANGLE)"},
    {name: "SINH", category: "Numeric Functions", return: "Calculate the hyperbolic sine.", example: "SINH(ANGLE)"},
    {name: "TAN", category: "Numeric Functions", return: "Calculate the trigonometric tangent.", example: "TAN(ANGLE)"},
    {name: "TANH", category: "Numeric Functions", return: "Calculate the hyperbolic tangent.", example: "TANH(X)"},
    {name: "ATAN2", category: "Numeric Functions", return: "Calculate the angle when converting the rectangular coordinates to polar coordinates.", example: "ATAN2(X, Y)"},
    {name: "BITAND", category: "Numeric Functions", return: "The bitwise AND operation.", example: "BITAND(A, B)"},
    {name: "BITGET", category: "Numeric Functions", return: "Returns true if and only if the first parameter has a bit set in the position specified by the second parameter.", example: "BITGET(A, 1)"},
    {name: "BITNOT", category: "Numeric Functions", return: "The bitwise NOT operation.", example: "BITNOT(A)"},
    {name: "BITOR", category: "Numeric Functions", return: "The bitwise OR operation.", example: "BITOR(A, B)"},
    {name: "BITXOR", category: "Numeric Functions", return: "The bitwise XOR operation.", example: "BITXOR(A, B)"},
    {name: "LSHIFT", category: "Numeric Functions", return: "The bitwise left shift operation.", example: "LSHIFT(A, B)"},
    {name: "RSHIFT", category: "Numeric Functions", return: "The bitwise right shift operation.", example: "RSHIFT(A, B)"},
    {name: "MOD", category: "Numeric Functions", return: "The modulo operation.", example: "MOD(A, B)"},
    {name: "CEILING", category: "Numeric Functions", return: "Returns the smallest integer value that is greater than or equal to the argument.", example: "CEIL(A)"},
    {name: "DEGREES", category: "Numeric Functions", return: "See also Java Math.toDegrees. This method returns a double.", example: "DEGREES(A)"},
    {name: "EXP", category: "Numeric Functions", return: "See also Java Math.exp. This method returns a double.", example: "EXP(A)"},
    {name: "FLOOR", category: "Numeric Functions", return: "Returns the largest integer value that is less than or equal to the argument.", example: "FLOOR(A)"},
    {name: "LN", category: "Numeric Functions", return: "Calculates the natural (base e) logarithm as a double value.", example: "LN(A)"},
    {name: "LOG", category: "Numeric Functions", return: "Calculates the logarithm with specified base as a double value.", example: "LOG(2, A)"},
    {name: "LOG10", category: "Numeric Functions", return: "Calculates the base 10 logarithm as a double value.", example: "LOG10(A)"},
    {name: "ORA_HASH", category: "Numeric Functions", return: "Computes a hash value. Optional bucket argument determines the maximum returned value.", example: "ORA_HASH(A)"},
    {name: "RADIANS", category: "Numeric Functions", return: "See also Java Math.toRadians. This method returns a double.", example: "RADIANS(A)"},
    {name: "SQRT", category: "Numeric Functions", return: "See also Java Math.sqrt. This method returns a double.", example: "SQRT(A)"},
    {name: "PI", category: "Numeric Functions", return: "See also Java Math.PI. This method returns a double.", example: "PI()"},
    {name: "POWER", category: "Numeric Functions", return: "See also Java Math.pow. This method returns a double.", example: "POWER(A, B)"},
    {name: "RAND", category: "Numeric Functions", return: "Calling the function without parameter returns the next a pseudo random number.", example: "RAND()"},
    {name: "RANDOM_UUID", category: "Numeric Functions", return: "Returns a new UUID with 122 pseudo random bits.", example: "RANDOM_UUID()"},
    {name: "ROUND", category: "Numeric Functions", return: "Rounds to a number of fractional digits.", example: "ROUND(VALUE, 2)"},
    {name: "ROUNDMAGIC", category: "Numeric Functions", return: "This function rounds numbers in a good way, but it is slow.", example: "ROUNDMAGIC(VALUE/3*3)"},
    {name: "SECURE_RAND", category: "Numeric Functions", return: "Generates a number of cryptographically secure random numbers.", example: "SECURE_RAND(16)"},
    {name: "SIGN", category: "Numeric Functions", return: "Returns -1 if the value is smaller than 0, 0 if zero, and otherwise 1.", example: "SIGN(VALUE)"},
    {name: "ENCRYPT", category: "Numeric Functions", return: "Encrypts data using a key. The supported algorithm is AES. The block size is 16 bytes. This method returns bytes.", example: "ENCRYPT('AES', '00', STRINGTOUTF8('Test'))"},
    {name: "DECRYPT", category: "Numeric Functions", return: "Decrypts data using a key. The supported algorithm is AES. The block size is 16 bytes. This method returns bytes.", example: "DECRYPT('AES', '00', '3fabb4de8f1ee2e97d7793bab2db1116')"},
    {name: "HASH", category: "Numeric Functions", return: "Calculate the hash value using an algorithm, and repeat this process for a number of iterations.", example: "HASH('SHA256', STRINGTOUTF8('Password'), 1000)"},
    {name: "TRUNCATE", category: "Numeric Functions", return: "When a numeric argument is specified, truncates it to a number of digits (to the next value closer to 0) and returns a double, float, or numeric value depending on type of the argument. When used with a timestamp, truncates the timestamp to a date (day) value and returns a timestamp with or without time zone depending on type of the argument. When used with a date, returns a timestamp at start of this date. When used with a timestamp as string, truncates the timestamp to a date (day) value and returns a timestamp without time zone.", example: "TRUNCATE(VALUE, 2)"},
    {name: "COMPRESS", category: "Numeric Functions", return: "Compresses the data using the specified compression algorithm. Supported algorithms are: LZF (faster but lower compression; default), and DEFLATE (higher compression). Compression does not always reduce size. Very small objects and objects with little redundancy may get larger. This method returns bytes.", example: "COMPRESS(STRINGTOUTF8('Test'))"},
    {name: "EXPAND", category: "Numeric Functions", return: "Expands data that was compressed using the COMPRESS function.", example: "EXPAND(COMPRESS(STRINGTOUTF8('Test')))"},
    {name: "ZERO", category: "Numeric Functions", return: "Returns the value 0.", example: "ZERO()"},
    // string functions
    {name: "ASCII", category: "String Functions", return: "Returns the ASCII value of the first character in the string.", example: "ASCII('Hi')"},
    {name: "BIT_LENGTH", category: "String Functions", return: "Returns the number of bits in a string.", example: "BIT_LENGTH(NAME)"},
    {name: "LENGTH", category: "String Functions", return: "Returns the number of characters in a string.", example: "LENGTH(NAME)"},
    {name: "OCTET_LENGTH", category: "String Functions", return: "Returns the number of bytes in a string.", example: "OCTET_LENGTH(NAME)"},
    {name: "CHAR", category: "String Functions", return: "Returns the character that represents the ASCII value.", example: "CHAR(65)"},
    {name: "CONCAT", category: "String Functions", return: "Combines strings. Unlike with the operator ||, NULL parameters are ignored, and do not cause the result to become NULL.", example: "CONCAT(NAME, '!')"},
    {name: "CONCAT_WS", category: "String Functions", return: "Combines strings with separator. Unlike with the operator ||, NULL parameters are ignored, and do not cause the result to become NULL.", example: "CONCAT_WS(',', NAME, '!')"},
    {name: "DIFFERENCE", category: "String Functions", return: "Returns the difference between the sounds of two strings.", example: "DIFFERENCE(T1.NAME, T2.NAME)"},
    {name: "HEXTORAW", category: "String Functions", return: "Converts a hex representation of a string to a string. 4 hex characters per string character are used.", example: "HEXTORAW(DATA)"},
    {name: "RAWTOHEX", category: "String Functions", return: "Converts a string or bytes to the hex representation. 4 hex characters per string character are used.", example: "RAWTOHEX(DATA)"},
    {name: "INSTR", category: "String Functions", return: "Returns the location of a search string in a string.", example: "INSTR(EMAIL,'@')"},
    {name: "INSERT Function", category: "String Functions", return: "Inserts a additional string into the original string at a specified start position. The length specifies the number of characters that are removed at the start position in the original string.", example: "INSERT(NAME, 1, 1, ' ')"},
    {name: "LOWER", category: "String Functions", return: "Converts a string to lowercase.", example: "LOWER(NAME)"},
    {name: "UPPER", category: "String Functions", return: "Converts a string to uppercase.", example: "UPPER(NAME)"},
    {name: "LEFT", category: "String Functions", return: "Returns the leftmost number of characters.", example: "LEFT(NAME, 3)"},
    {name: "RIGHT", category: "String Functions", return: "Returns the rightmost number of characters.", example: "RIGHT(NAME, 3)"},
    {name: "LOCATE", category: "String Functions", return: "Returns the location of a search string in a string.", example: "LOCATE('.', NAME)"},
    {name: "POSITION", category: "String Functions", return: "Returns the location of a search string in a string. See also LOCATE.", example: "POSITION('.', NAME)"},
    {name: "LPAD", category: "String Functions", return: "Left pad the string to the specified length.", example: "LPAD(AMOUNT, 10, '*')"},
    {name: "RPAD", category: "String Functions", return: "Right pad the string to the specified length.", example: "RPAD(TEXT, 10, '-')"},
    {name: "LTRIM", category: "String Functions", return: "Removes all leading spaces from a string.", example: "LTRIM(NAME)"},
    {name: "RTRIM", category: "String Functions", return: "Removes all trailing spaces from a string.", example: "RTRIM(NAME)"},
    {name: "TRIM", category: "String Functions", return: "Removes all leading spaces, trailing spaces, or spaces at both ends, from a string. Other characters can be removed as well.", example: "TRIM(BOTH '_' FROM NAME)"},
    {name: "REGEXP_REPLACE", category: "String Functions", return: "Replaces each substring that matches a regular expression. Flags values limited to 'i', 'c', 'n', 'm'. Other symbols causes exception. Multiple symbols could be uses in one flagsString parameter (like 'im'). Later flags overrides first ones, for example 'ic' equivalent to case sensitive matching 'c'.", example: "REGEXP_REPLACE('Hello    World', ' +', ' ')"},
    {name: "REGEXP_LIKE", category: "String Functions", return: "Matches string to a regular expression. Flags values limited to 'i', 'c', 'n', 'm'. Other symbols causes exception. Multiple symbols could be uses in one flagsString parameter (like 'im'). Later flags overrides first ones, for example 'ic' equivalent to case sensitive matching 'c'.", example: "REGEXP_LIKE('Hello    World', '[A-Z ]*', 'i')"},
    {name: "REPEAT", category: "String Functions", return: "Returns a string repeated some number of times.", example: "REPEAT(NAME || ' ', 10)"},
    {name: "REPLACE", category: "String Functions", return: "Replaces all occurrences of a search string in a text with another string.", example: "REPLACE(NAME, ' ')"},
    {name: "SOUNDEX", category: "String Functions", return: "Returns a four character code representing the sound of a string.", example: "SOUNDEX(NAME)"},
    {name: "SPACE", category: "String Functions", return: "Returns a string consisting of a number of spaces.", example: "SPACE(80)"},
    {name: "STRINGDECODE", category: "String Functions", return: "Converts a encoded string using the Java string literal encoding format.", example: "STRINGDECODE('Lines 1 Line 2')"},
    {name: "STRINGENCODE", category: "String Functions", return: "Encodes special characters in a string using the Java string literal encoding format.", example: "STRINGDECODE('Lines 1 Line 2')"},
    {name: "STRINGTOUTF8", category: "String Functions", return: "Encodes a string to a byte array using the UTF8 encoding format.", example: "STRINGTOUTF8('This is a test')"},
    {name: "SUBSTRING", category: "String Functions", return: "Returns a substring of a string starting at a position.", example: "SUBSTR('Hello World', -5)"},
    {name: "UTF8TOSTRING", category: "String Functions", return: "Decodes a byte array in the UTF8 format to a string.", example: "UTF8TOSTRING(STRINGTOUTF8('This is a test'))"},
    {name: "QUOTE_IDENT", category: "String Functions", return: "Quotes the specified identifier. Identifier is surrounded by double quotes. If identifier contains double quotes they are repeated twice.", example: "QUOTE_IDENT('Column 1')"},
    {name: "XMLATTR", category: "String Functions", return: "Creates an XML attribute element of the form name=value. The value is encoded as XML text.", example: "XMLATTR('href', 'https://autoinsight.com')"},
    {name: "XMLNODE", category: "String Functions", return: "Create an XML node element.", example: " XMLNODE('a', XMLATTR('href', 'https://h1.com'), 'H1')"},
    {name: "XMLCOMMENT", category: "String Functions", return: "Creates an XML comment. Two dashes (--) are converted to - -.", example: "XMLCOMMENT('Test')"},
    {name: "XMLCDATA", category: "String Functions", return: "Creates an XML CDATA element. If the value contains ]]>, an XML text element is created instead. This method returns a string.", example: "XMLCDATA('data')"},
    {name: "XMLSTARTDOC", category: "String Functions", return: "Returns the XML declaration. The result is always <?xml version=1.0?>.", example: "XMLSTARTDOC()"},
    {name: "XMLTEXT", category: "String Functions", return: "Creates an XML text element. If enabled, newline and linefeed is converted to an XML entity (&#).", example: "XMLTEXT('test')"},
    {name: "TO_CHAR", category: "String Functions", return: "Oracle-compatible TO_CHAR function that can format a timestamp, a number, or text.", example: "TO_CHAR(TIMESTAMP '2010-01-01 00:00:00', 'DD MON, YYYY')"},
    {name: "TRANSLATE", category: "String Functions", return: "Oracle-compatible TRANSLATE function that replaces a sequence of characters in a string with another set of characters.", example: "TRANSLATE('Hello world', 'eo', 'EO')"},
    // time & date functions
    {name: "CURRENT_DATE", category: "Time & Date Functions", return: "Returns the current date.", example: "CURRENT_DATE"},
    {name: "CURRENT_TIME", category: "Time & Date Functions", return: "Returns the current time with time zone.", example: "CURRENT_TIME"},
    {name: "CURRENT_TIMESTAMP", category: "Time & Date Functions", return: "Returns the current timestamp with time zone.", example: "CURRENT_TIMESTAMP"},
    {name: "LOCALTIME", category: "Time & Date Functions", return: "Returns the current time without time zone.", example: "LOCALTIME"},
    {name: "LOCALTIMESTAMP", category: "Time & Date Functions", return: "Returns the current timestamp without time zone.", example: "LOCALTIMESTAMP"},
    {name: "DATEADD", category: "Time & Date Functions", return: "Adds units to a date-time value.", example: "DATEADD(MONTH, 1, DATE '2001-01-31')"},
    {name: "DATEDIFF", category: "Time & Date Functions", return: "Returns the number of crossed unit boundaries between two date/time values.", example: "DATEDIFF(YEAR, T1.CREATED, T2.CREATED)"},
    {name: "DAYNAME", category: "Time & Date Functions", return: "Returns the name of the day (in English).", example: "DAYNAME(CREATED)"},
    {name: "DAY_OF_MONTH", category: "Time & Date Functions", return: "Returns the day of the month (1-31).", example: "DAY_OF_MONTH(CREATED)"},
    {name: "DAY_OF_WEEK", category: "Time & Date Functions", return: "Returns the day of the week (1 means Sunday).", example: "DAY_OF_WEEK(CREATED)"},
    {name: "ISO_DAY_OF_WEEK", category: "Time & Date Functions", return: "Returns the ISO day of the week (1 means Monday).", example: "ISO_DAY_OF_WEEK(CREATED)"},
    {name: "DAY_OF_YEAR", category: "Time & Date Functions", return: "Returns the day of the year (1-366).", example: "DAY_OF_YEAR(CREATED)"},
    {name: "EXTRACT", category: "Time & Date Functions", return: "Returns a value of the specific time unit from a date/time value.", example: "EXTRACT(SECOND FROM CURRENT_TIMESTAMP)"},
    {name: "FORMATDATETIME", category: "Time & Date Functions", return: "Formats a date, time or timestamp as a string.", example: "FORMATDATETIME(TIMESTAMP '2001-02-03 04:05:06', 'EEE, d MMM yyyy HH:mm:ss z', 'en', 'GMT')"},
    {name: "HOUR", category: "Time & Date Functions", return: "Returns the hour (0-23) from a date/time value.", example: "HOUR(CREATED)"},
    {name: "MINUTE", category: "Time & Date Functions", return: "Returns the minute (0-59) from a date/time value.", example: "MINUTE(CREATED)"},
    {name: "MONTH", category: "Time & Date Functions", return: "Returns the month (1-12) from a date/time value.", example: "MONTH(CREATED)"},
    {name: "MONTHNAME", category: "Time & Date Functions", return: "Returns the name of the month (in English).", example: "MONTHNAME(CREATED)"},
    {name: "PARSEDATETIME", category: "Time & Date Functions", return: "Parses a string and returns a timestamp.", example: "PARSEDATETIME('Sat, 3 Feb 2001 03:05:06 GMT', 'EEE, d MMM yyyy HH:mm:ss z', 'en', 'GMT')"},
    {name: "QUARTER", category: "Time & Date Functions", return: "Returns the quarter (1-4) from a date/time value.", example: "QUARTER(CREATED)"},
    {name: "SECOND", category: "Time & Date Functions", return: "Returns the second (0-59) from a date/time value.", example: "SECOND(CREATED|interval)"},
    {name: "WEEK", category: "Time & Date Functions", return: "Returns the week (1-53) from a date/time value.", example: "WEEK(CREATED)"},
    {name: "ISO_WEEK", category: "Time & Date Functions", return: "Returns the ISO week (1-53) from a date/time value. This function uses the ISO definition when first week of year should have at least four days and week is started with Monday.", example: "ISO_WEEK(CREATED)"},
    {name: "YEAR", category: "Time & Date Functions", return: "Returns the year from a date/time value.", example: "YEAR(CREATED)"},
    {name: "ISO_YEAR", category: "Time & Date Functions", return: "Returns the ISO week year from a date/time value.", example: "ISO_YEAR(CREATED)"},
    // system functions
    {name: "ARRAY_GET", category: "Other Functions", return: "Returns element at the specified 1-based index from an array. Returns NULL if there is no such element or array is NULL.", example: "ARRAY_GET(ARRAY['Hello', 'World'], 2)"},
    {name: "ARRAY_LENGTH", category: "Other Functions", return: "Returns the length of an array. Returns NULL if the specified array is NULL.", example: "ARRAY_LENGTH(ARRAY['Hello', 'World'])"},
    {name: "ARRAY_CONTAINS", category: "Other Functions", return: "Returns a boolean TRUE if the array contains the value or FALSE if it does not contain it. Returns NULL if the specified array is NULL.", example: " ARRAY_CONTAINS(ARRAY['Hello', 'World'], 'Hello')"},
    {name: "ARRAY_CAT", category: "Other Functions", return: "Returns the concatenation of two arrays. Returns NULL if any parameter is NULL.", example: "ARRAY_CAT(ARRAY[1, 2], ARRAY[3, 4])"},
    {name: "ARRAY_APPEND", category: "Other Functions", return: "Append an element to the end of an array. Returns NULL if any parameter is NULL.", example: "ARRAY_APPEND(ARRAY[1, 2], 3)"},
    {name: "ARRAY_SLICE", category: "Other Functions", return: "Returns elements from the array as specified by the lower and upper bound parameters. Both parameters are inclusive and the first element has index 1, i.e. ARRAY_SLICE(a, 2, 2) has only the second element. Returns NULL if any parameter is NULL or if an index is out of bounds.", example: "ARRAY_SLICE(ARRAY[1, 2, 3, 4], 1, 3)"},
    {name: "CASEWHEN Function", category: "Other Functions", return: "Returns 'a' if the boolean expression is true, otherwise 'b'. Returns the same data type as the parameter.", example: "CASEWHEN(ID=1, 'A', 'B')"},
    {name: "CAST", category: "Other Functions", return: "Converts a value to another data type. The following conversion rules are used: When converting a number to a boolean, 0 is false and every other value is true. When converting a boolean to a number, false is 0 and true is 1. When converting a number to a number of another type, the value is checked for overflow. When converting a number to binary, the number of bytes matches the precision. When converting a string to binary, it is hex encoded (every byte two characters); a hex string can be converted to a number by first converting it to binary. If a direct conversion is not possible, the value is first converted to a string. Note that some data types may need explicitly specified precision to avoid overflow or rounding.", example: "CAST(NAME AS INT)"},
    {name: "COALESCE", category: "Other Functions", return: "Returns the first value that is not null.", example: "COALESCE(A, B, C)"},
    {name: "CONVERT", category: "Other Functions", return: "Converts a value to another data type.", example: "CONVERT(NAME, INT)"},
    {name: "CSVREAD", category: "Other Functions", return: "Returns the result set of reading the CSV (comma separated values) file. For each parameter, NULL means the default value should be used.", example: "CSVREAD('test2.csv', 'ID|NAME', 'charset=UTF-8 fieldSeparator=|')"},
    {name: "CSVWRITE", category: "Other Functions", return: "Writes a CSV (comma separated values). The file is overwritten if it exists. If only a file name is specified, it will be written to the current working directory. For each parameter, NULL means the default value should be used. The default charset is the default value for this system, and the default field separator is a comma.", example: "CSVWRITE('data/test2.csv', 'SELECT * FROM TEST', 'charset=UTF-8 fieldSeparator=|')"},
    {name: "CURRENT_CATALOG", category: "Other Functions", return: "Returns the name of the workbook.", example: "CURRENT_CATALOG"},
    {name: "DECODE", category: "Other Functions", return: "Returns the first matching value. NULL is considered to match NULL. If no match was found, then NULL or the last parameter (if the parameter count is even) is returned. This function is provided for Oracle compatibility (see there for details).", example: "DECODE(RAND()>0.5, 0, 'Red', 1, 'Black')"},
    {name: "DISK_SPACE_USED", category: "Other Functions", return: "Returns the approximate amount of space used by the table specified. Does not currently take into account indexes or LOB's. This function may be expensive since it has to load every page in the table.", example: "DISK_SPACE_USED('my_table')"},
    {name: "GREATEST", category: "Other Functions", return: "Returns the largest value that is not NULL, or NULL if all values are NULL.", example: "GREATEST(1, 2, 3)"},
    {name: "IFNULL", category: "Other Functions", return: "Returns the value of 'a' if it is not null, otherwise 'b'.", example: "IFNULL(NULL, '')"},
    {name: "LEAST", category: "Other Functions", return: "Returns the smallest value that is not NULL, or NULL if all values are NULL.", example: "LEAST(1, 2, 3)"},
    {name: "NULLIF", category: "Other Functions", return: "Returns NULL if 'a' is equals to 'b', otherwise 'a'.", example: "NULLIF(A, B)"},
    {name: "NVL2", category: "Other Functions", return: "If the test value is null, then 'b' is returned. Otherwise, 'a' is returned. The data type of the returned value is the data type of 'a' if this is a text type.", example: "NVL2(X, 'not null', 'null')"},
    // JSON functions
    {name: "JSON_OBJECT", category: "JSON Functions", return: "Returns a JSON object constructed from the specified properties. If ABSENT ON NULL is specified properties with NULL value are not included in the object. If WITH UNIQUE KEYS is specified the constructed object is checked for uniqueness of keys, nested objects, if any, are checked too.", example: "JSON_OBJECT('id': 100, 'name': 'Joe', 'groups': '[2,5]' FORMAT JSON)"},
    {name: "JSON_ARRAY", category: "JSON Functions", return: "Returns a JSON array constructed from the specified values or from the specified single-column subquery. If NULL ON NULL is specified NULL values are included in the array.", example: "JSON_ARRAY(10, 15, 20)"},
  ];
}

export { getSchemaFunctions };